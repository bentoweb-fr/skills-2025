name: Build and Deploy

on:
  push:
    branches: [ "prod" ]

env:
  GHCR_FRONT_IMAGE: skills2025/front
  GHCR_API_IMAGE: skills2025/api
  GHCR_NGINX_IMAGE: skills2025/nginx

jobs:
  front_build:
    name: Build Front
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: ./front
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install NPM
        uses: actions/setup-node@v4
        with: 
          cache: "npm"
          cache-dependency-path: ./front/package-lock.json
      - name: Build Vue+Vite
        run: | 
          npm ci --cache .npm --prefer-offline
          npm run build
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: front-artifact
          path: ./front/public
          retention-days: 1
      # - name: Login GHCR 
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ secrets.REGISTRY_USER }}
      #     password: ${{ secrets.REGISTRY_TOKEN }}
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./front/public
      #     file: ./docker/front/Dockerfile-CI
      #     push: true
      #     tags: ghcr.io/${{ secrets.REGISTRY_USER }}/${{ env.GHCR_FRONT_IMAGE }}:latest

  api_build:
    name: Build API
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: ./api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login GHCR 
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          file: ./docker/api/Dockerfile-CI
          push: true
          tags: ghcr.io/${{ secrets.REGISTRY_USER }}/${{ env.GHCR_API_IMAGE }}:latest

  front_deploy: 
    name: Deploy Front
    needs: front_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: front-artifact
          path: ./front/public
      - name: D√©ployer sur le PS
        run: | 
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
          # scp -r ./front/public/. ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:~/www/front/
      # - name: Login GHCR 
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ secrets.REGISTRY_USER }}
      #     password: ${{ secrets.REGISTRY_TOKEN }}
      # - name: Download Docker Image skills2025/front
      #   run: | 
      #     docker pull ghcr.io/${{ secrets.REGISTRY_USER }}/skills2025_front:latest

  api_deploy:
    name: Deploy API
    needs: api_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login GHCR 
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      # - name: Pull Docker image
      #   run: | 
      #     docker pull ghcr.io/${{ secrets.REGISTRY_USER }}/${{ env.GHCR_API_IMAGE }}:latest
      - name: Pull API Docker image on server
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
          ssh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} \
            "docker login ghcr.io -u ${{ secrets.REGISTRY_USER }} -p ${{ secrets.REGISTRY_TOKEN }} && \
            docker pull ghcr.io/${{ secrets.REGISTRY_USER }}/${{ env.GHCR_API_IMAGE }}:latest"

  nginx_build:
    name: Build Nginx
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: ./nginx
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login GHCR 
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Nginx conf file
        run: |
          mv "nginx-prod.conf" "nginx.conf"
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          file: ./docker/nginx/Dockerfile-CI
          push: true
          tags: ghcr.io/${{ secrets.REGISTRY_USER }}/${{ env.GHCR_NGINX_IMAGE }}:latest
  
  nginx_deploy:
    name: Deploy Nginx
    needs: [nginx_build, front_deploy, api_deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # - name: D√©ployer Nginx sur le PS
      #   run: echo "ok"
      - name: Pull Nginx Docker image on server
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
          ssh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} \
            "docker login ghcr.io -u ${{ secrets.REGISTRY_USER }} -p ${{ secrets.REGISTRY_TOKEN }} && \
            docker pull ghcr.io/${{ secrets.REGISTRY_USER }}/${{ env.GHCR_NGINX_IMAGE }}:latest"

  reboot:
    name: Reboot
    needs: [nginx_deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Copy docker-compose file to server
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
          scp ./docker-compose.prod.yaml ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:/home/benoit/www/skills2025/
      - name : docker cmd
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
          ssh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} \
            cd /home/benoit/www/skills2025 && docker compose down && docker compose -f docker-compose.prod.yaml up -d
      
# run: | 
# eval $(ssh-agent -s)
 # ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
# mkdir -p ~/.ssh
# ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
# scp ./nginx/nginx.conf ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:/etc/nginx/sites-available/skills2025.conf
# ssh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "sudo ln -s /etc/nginx/sites-available/skills2025.conf /etc/nginx/sites-enabled/skills2025.conf && sudo systemctl reload nginx"
# scp ./nginx/nginx.conf ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:/etc/nginx/sites-available/skills2025.conf

# with: 
# context: ./front
# - name: üîê Login to GHCR
# run: echo "${{ secrets.REGISTRY_TOKEN }}" | docker login ghcr.io -u ${{ secrets.REGISTRY_USER }} --password-stdin
      #   run: | 
      #     cd front
      #     npm install
      #     npm run build
      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: front-artefact
      #     path: ./front/public
      #     retention-days: 1
# docker build -t $GHCR_FRONT_IMAGE -f ./docker/front/Dockerfile ./public
# docker push $GHCR_FRONT_IMAGE
        





      # - name: Login GHCR 
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ secrets.REGISTRY_USER }}
      #     password: ${{ secrets.REGISTRY_TOKEN }}
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./front/public
      #     file: ./docker/front/Dockerfile-CI
          # platforms: ${{ matrix.platform }}
          # build-args: |
            # "ARG_SITE_URL=${{ env.SITE_URL }}"
            # "ARG_PLAUSIBLE_SCRIPT_URL=${{ env.PLAUSIBLE_SCRIPT_URL }}"
            # "ARG_PLAUSIBLE_DOMAIN=${{ env.PLAUSIBLE_DOMAIN }}"
          # push: true
          # tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          # cache-to: type=inline


      # - name: Build and Push Docker image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./front/public
      #     file: ./docker/front/Dockerfile-CI
      #     push: true
      #     tags: ghcr.io/${{ secrets.REGISTRY_USER }}/skills2025_front:latest