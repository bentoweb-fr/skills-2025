name: Build and Deploy

on:
  push:
    branches: [ "prod" ]

env:
  GHCR_FRONT_IMAGE: skills2025-front
  GHCR_API_IMAGE: skills2025-api
  GHCR_NGINX_IMAGE: skills2025-nginx

jobs:
  front_build:
    name: Build Front
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: ./front
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install NPM
        uses: actions/setup-node@v4
        with: 
          cache: "npm"
          cache-dependency-path: ./front/package-lock.json
      - name: Build Vue+Vite
        run: | 
          npm ci --cache .npm --prefer-offline
          npm run build
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: front-artifact
          path: ./front/public
          retention-days: 1

  api_build:
    name: Build API
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: ./api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Entrypoint script
        run: |
          cp ../docker/api/entrypoint.sh entrypoint.sh
      - name: Login GHCR 
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          file: ./docker/api/Dockerfile-CI
          push: true
          tags: ghcr.io/${{ secrets.REGISTRY_USER }}/${{ env.GHCR_API_IMAGE }}:latest

  nginx_build:
    name: Build Nginx
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: ./nginx
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Nginx conf file
        run: |
          mv nginx-prod.conf nginx.conf
      - name: Login GHCR 
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          file: ./docker/nginx/Dockerfile-CI
          push: true
          tags: ghcr.io/${{ secrets.REGISTRY_USER }}/${{ env.GHCR_NGINX_IMAGE }}:latest
          # no-cache: true

  api_deploy:
    name: Deploy API
    needs: api_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login GHCR 
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Pull API Docker image on server
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
          ssh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} \
            "mkdir -p /home/${{ secrets.PROD_SSH_USER }}/www/api/ && \
            docker login ghcr.io -u ${{ secrets.REGISTRY_USER }} -p ${{ secrets.REGISTRY_TOKEN }} && \
            docker pull ghcr.io/${{ secrets.REGISTRY_USER }}/${{ env.GHCR_API_IMAGE }}:latest"
      - name: Générer le fichier .env pour la prod
        run: |
          echo "MYSQL_DATABASE_PROD=${{ secrets.MYSQL_DATABASE_PROD }}" >> .env
          echo "MYSQL_USER_PROD=${{ secrets.MYSQL_USER_PROD }}" >> .env
          echo "MYSQL_PASSWORD_PROD=${{ secrets.MYSQL_PASSWORD_PROD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD_PROD=${{ secrets.MYSQL_ROOT_PASSWORD_PROD }}" >> .env
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
          scp .env ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:/home/${{ secrets.PROD_SSH_USER }}/www/skills2025/.env

  front_deploy: 
    name: Deploy Front
    needs: front_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: front-artifact
          path: ./front/public
      - name: Déployer sur le PS
        run: | 
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
          ssh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "mkdir -p /home/${{ secrets.PROD_SSH_USER }}/www/front/"
          scp -r ./front/public/. ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:/home/${{ secrets.PROD_SSH_USER }}/www/front/ 

  nginx_deploy:
    name: Deploy Nginx
    needs: [nginx_build, front_deploy, api_deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Debug NGINX image tag
        run: echo "ghcr.io/${{ secrets.REGISTRY_USER }}/${{ env.GHCR_NGINX_IMAGE }}:latest"
      - name: Pull Nginx Docker image on server
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
          ssh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} \
            "docker login ghcr.io -u ${{ secrets.REGISTRY_USER }} -p ${{ secrets.REGISTRY_TOKEN }} && \
            docker pull ghcr.io/${{ secrets.REGISTRY_USER }}/${{ env.GHCR_NGINX_IMAGE }}:latest"

  reboot:
    name: Reboot
    needs: [nginx_deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Copy docker-compose file to server
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
          scp ./docker-compose.prod.yaml ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:/home/${{ secrets.PROD_SSH_USER }}/www/skills2025/
      - name : docker cmd
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
          ssh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "
            docker volume create bentoweb_db_data || true
            docker compose -f /home/${{ secrets.PROD_SSH_USER }}/www/skills2025/docker-compose.prod.yaml down && \
            docker compose -f /home/${{ secrets.PROD_SSH_USER }}/www/skills2025/docker-compose.prod.yaml up -d
          "


######################## TODO
# - Si Nginx est déjà lancé, simplement le redémarrer après avoir copié les fichiers deconfig du site concerné à côté des configs des autres sites