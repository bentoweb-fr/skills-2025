FROM php:8.4-fpm

# Installer les dépendances de base et les extensions PHP nécessaires
RUN apt-get update && apt-get install -y \
    libpng-dev \
    libjpeg-dev \
    libfreetype6-dev \
    libicu-dev \
    zip \
    libzip-dev \
    unzip \
    curl \
    default-mysql-client \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install intl pdo pdo_mysql mysqli gd zip gd exif \
    && docker-php-ext-enable pdo_mysql gd exif

# Installer Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Définir le répertoire de travail
WORKDIR /var/www/api

# Copier d'abord composer.json et composer.lock pour optimiser le cache Docker
COPY composer.json composer.lock ./

# Installer les dépendances PHP (sans scripts pour optimiser le cache)
RUN composer install --no-dev --optimize-autoloader --no-interaction --no-scripts

# Copier tous les fichiers de l'application
COPY . .

# S'assurer que APP_ENV est défini pour la production AVANT d'exécuter les scripts
ENV APP_ENV=prod
ENV APP_DEBUG=0

# Installer les assets et nettoyer le cache (maintenant que APP_ENV=prod)
RUN composer run-script auto-scripts

# Debug: Vérifier la configuration des bundles ET s'assurer que prod=false est présent
RUN echo "=== BUNDLES CONFIGURATION ===" && cat config/bundles.php && \
    echo "=== VERIFICATION WEBPROFILER ===" && \
    grep -q "'prod' => false" config/bundles.php && echo "✅ WebProfiler correctement désactivé en prod" || \
    (echo "❌ ERREUR: WebProfiler non désactivé en prod dans bundles.php" && exit 1)

# IMPORTANT: Supprimer les fichiers de configuration de développement qui ne doivent pas être en production
RUN rm -f config/packages/web_profiler.yaml config/packages/debug.yaml config/routes/web_profiler.yaml

# Debug: Vérifier que les fichiers ont été supprimés
RUN echo "=== FICHIERS APRÈS SUPPRESSION ===" && \
    (ls -la config/packages/ | grep -E "(web_profiler|debug)" || echo "Aucun fichier de développement dans packages/ - OK") && \
    (ls -la config/routes/ | grep -E "(web_profiler|debug)" || echo "Aucun fichier de développement dans routes/ - OK")

# Nettoyer explicitement le cache Symfony après configuration
RUN rm -rf var/cache/* || true

# Réexécuter composer pour les scripts post-install
RUN composer dump-autoload --optimize

# Test de Symfony pour vérifier qu'il n'y a pas d'erreur de configuration
RUN php bin/console about --env=prod || echo "Erreur de configuration Symfony détectée"

# Définir les permissions
RUN chown -R www-data:www-data /var/www/api
RUN chmod -R 755 /var/www/api

# Copier et configurer l'entrypoint
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
CMD ["php-fpm"]
